#! /usr/bin/env python
#! -*- coding=utf-8 -*-
# Project:  Easy_HMM
# Filename: dice
# Date: 9/14/18
# Author: üòè <smirk dot cao at gmail dot com>
from hmmlearn import hmm
import numpy as np
import logging
""" 
Ëâ≤Â≠êÈóÆÈ¢ò, ÂåÖÂê´‰∏â‰∏™Â∞èÈóÆÈ¢ò, Â∑≤Áü•ËßÇÊµãËâ≤Â≠êÂ§ßÂ∞èÂ∫èÂàóX
A. Ê±ÇÊØèÊ¨°‰∏¢ÁöÑÈ™∞Â≠êÁöÑÁßçÁ±ª      ÂØπÂ∫îÊ±ÇÈöêËóèÁöÑÁä∂ÊÄÅÂ∫èÂàó
B. ‰∏¢Âá∫ËØ•‰∏≤Êï∞Â≠óÁöÑÊ¶ÇÁéá        ÂØπÂ∫îÊù°‰ª∂Ê¶ÇÁéáÊ±ÇÂíå
C. ‰∏ãÊ¨°‰∏¢È™∞Â≠êÊúÄÊúâÂèØËÉΩÁöÑÊï∞Â≠ó   Ëøô‰∏™‰æãÂ≠êÁ®çÂæÆÊúâÁÇπÁâπÊÆä, Âõ†‰∏∫ËΩ¨ÁßªÁü©ÈòµÊòØÂØπÁß∞ÁöÑ, ÂêÑ‰∏™Áä∂ÊÄÅË∑≥ËΩ¨ÁöÑÊ¶ÇÁéáÊòØ‰∏ÄÊ†∑ÁöÑ, Áúã‰∏çÂá∫Âõ∫ÂÆöÁöÑÁªìÊûú.
"""
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    # for this example
    # n_components: 3   ÂØπÂ∫î‰∏â‰∏™Ëâ≤Â≠ê
    # n_features: 1     ÁêÜËß£‰∏Ä‰∏ã, ËøôÈáåfeatureÂíåsymbolÊòØ‰∏ç‰∏ÄÊ†∑ÁöÑÂê´‰πâ. symbolÂØπÂ∫îËâ≤Â≠êÈù¢ÁöÑÂÖ´ÁßçÁä∂ÊÄÅ
    # ÂàùÂßãÊ¶ÇÁéá: ‰∏â‰∏™Ëâ≤Â≠êÈöèÊú∫ÊäΩÂèñ
    startprob = np.ones(3)
    startprob /= startprob.sum()
    # ËΩ¨ÁßªÁü©Èòµ: Êú∫‰ºöÂùáÁ≠â
    transmat = np.ones((3, 3))
    transmat /= transmat.sum(axis=1)
    # ËßÇÊµãÁü©Èòµ: ÂíåËâ≤Â≠êÈù¢Êï∞ÊúâÂÖ≥Á≥ª
    emissionprob = np.array([[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
                            [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                            [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]])
    emissionprob /= emissionprob.sum(axis=1, keepdims=True)

    hmmdice = hmm.MultinomialHMM(n_components=3, algorithm="map")
    hmmdice.startprob_ = startprob
    hmmdice.transmat_ = transmat
    hmmdice.emissionprob_ = emissionprob
    X = np.array([1, 6, 3, 5, 2, 7, 3, 5, 2, 4, 3, 6, 1, 5, 4]).reshape(-1, 1)
    # ÊïàÊûú‰∏ÄÊ†∑
    # X = np.array([[1, 6, 3, 5, 2, 7, 3, 5, 2, 4, 3, 6, 1, 5, 4]]).T
    # ÈóÆÈ¢òA
    prob, rst = hmmdice.decode(X)
    logger.info("\n%s" % hmmdice.startprob_)
    logger.info("\n%s" % hmmdice.transmat_)
    logger.info("\n%s" % hmmdice.emissionprob_)
    logger.info(hmmdice.predict(X))
    # ÈóÆÈ¢òB
    logger.info(prob)
    logger.info(rst)
    prob = hmmdice.predict_proba(X)
    logger.info("\n%s" % prob)
    # ÈóÆÈ¢òC
    hmmdice.startprob_ = prob[-1] >= prob[-1]
    rst, state = hmmdice.sample(15)
    logger.info("\n%s\n%s" % (rst.flatten()[1:], state[1:]))

    # Error using MultinomialHMM #154
    # X1 = np.array([0, 1, 1, 1, 1, 3, 1, 3, 1])
    # X2 = np.array([0, 2, 3, 1, 3, 2, 3])
    # X = np.concatenate([X1, X2])
    # lengths = [len(X1), len(X2)]
    # hmm_issue = hmm.MultinomialHMM(n_components=2)
    # hmm_issue.fit(X.reshape(-1, 1), lengths)
    # logger.info("\n%s" % hmm_issue.emissionprob_)
    # logger.info("\n%s" % hmm_issue.startprob_)
    # logger.info("\n%s" % hmm_issue.transmat_)
